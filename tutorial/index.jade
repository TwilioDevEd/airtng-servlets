.chapter(data-title='Masked Numbers')
  .step(data-title='About This Application', data-file='src/main/java/org/twilio/airtng/lib/notifications/SmsNotifier.java')
    :markdown
      ## About This Application

      ![Airtng](//howtodocs.s3.amazonaws.com/airtng-screen.png)

      This Java Servlet sample application is modeled after the
      amazing rental experience created by [AirBnB](//www.airbnb.com), but with
      more [Klingons](//en.wikipedia.org/wiki/Klingon).

      Host users can offer rental properties which other guest users can
      reserve. The guest and the host can then anonymously communicate via a
      disposable Twilio phone number created just for a reservation. In this
      tutorial, we'll show you the key bits of code to make this work.

      To run this sample app yourself, download the code and follow the
      [instructions on
      GitHub](//github.com/TwilioDevEd/airtng-servlets/tree/masked-numbers).

      Let's get started! Click the right arrow above to move to the next step
      of the tutorial.

      ---

      **See Also:**

      * [AirTNG App Part One: Workflow Automation](//github.com/TwilioDevEd/airtng-servlets)
      * [Getting Started with Java Servlets](//docs.oracle.com/javaee/6/tutorial/doc/bnafd.html)
      * [Getting Started with Gradle Java/JVM](//gradle.org/getting-started-gradle-java/)
      * [Executing Flyway Migrations with Gradle](//flywaydb.org/documentation/gradle/migrate.html)
      * [JDBC Basics](//docs.oracle.com/javase/tutorial/jdbc/basics/index.html)
      * [JPA Entities Definition](//docs.oracle.com/javaee/6/tutorial/doc/bnbqa.html)
      * [Twilio Java helper library](//www.twilio.com/docs/java/install)



  .step(data-title='Create a Reservation',
    data-file='src/main/java/org/twilio/airtng/servlets/ReservationServlet.java',
    data-highlight='46-67')
    :markdown
      ## Create a Reservation

      The first step in connecting a guest and host is creating a reservation.
      Here, we handle a form submission for a new reservation which contains the
      message, the _guest's_ information is pulled out from the logged user.

      ---

      **See Also:**

      * [Getting Started with Java Servlets](//docs.oracle.com/javaee/6/tutorial/doc/bnafd.html)


  .step(data-title='Confirm the Reservation',
    data-file='src/main/java/org/twilio/airtng/servlets/ReservationConfirmationServlet.java',
    data-highlight='54-60')
    :markdown
      ## Confirm the Reservation

      Before the reservation is finalized, the host needs to confirm that the property
      was reserved. Learn how to automate this process in our first AirTNG
      tutorial, [Workflow Automation](//github.com/TwilioDevEd/airtng-servlets).

      Once the reservation is confirmed, we need to purchase a Twilio number that
      the _guest_ and _host_ can use to communicate.

      Next we'll take a look at how we find and purchase this shared phone number.


  .step(data-title="Purchase a Twilio Number",
    data-file='src/main/java/org/twilio/airtng/lib/phonenumber/Purchaser.java',
    data-highlight='33-37, 40, 45, 48, 57-58, 63-71')
    :markdown
      ## Purchase a Twilio Number

      Here we use a [Twilio Java helper library](//www.twilio.com/docs/quickstart/java/client) to
      search for and buy a new phone number to associate with the reservation.
      When we buy the number, we designate a [Twilio
      Application](//www.twilio.com/docs/api/rest/applications) that will handle
      [webhook](//en.wikipedia.org/wiki/Webhook) requests when the new number
      receives an incoming call or text.

      We then save the new phone number on our `Reservation` model, so when our
      app receives calls or texts to this number, we'll know which reservation
      the call or text belongs to.

      ---

      **See Also:**

      * [Searching for Available Numbers](//www.twilio.com/docs/api/rest/available-phone-numbers)
      * [Purchase a Phone Number with the REST API](//www.twilio.com/docs/api/rest/incoming-phone-numbers)
      * [Create an Application in your account portal](//www.twilio.com/user/account/apps)


  .step(data-title="Find a Reservation",
    data-file='src/main/java/org/twilio/airtng/servlets/BaseExchangeServlet.java',
    data-highlight='21-31')
    :markdown
      ## Find a Reservation

      When someone sends an SMS or calls one of the Twilio numbers you have
      configured, Twilio makes a request to the URL you set in the Twiml app. In
      this request, Twilio includes some useful information including:

      * The `incomingPhoneNumber` number that originally called or sent an SMS.
      * The `anonymousPhoneNumber` Twilio number that triggered this request.

      Take a look at [Twilio's SMS
      Documentation](//www.twilio.com/docs/api/twiml/sms/twilio_request#request-parameters)
      and [Twilio's Voice
      Documentation](//www.twilio.com/docs/api/twiml/twilio_request#synchronous-request-parameters)
      for a full list of the parameters you can use.

      In our servlet we use the `to` parameter sent by Twilio to find a reservation
      that has the number we bought stored in it, as this is the number both hosts
      and guests will call and send SMS to.


  .step(data-title="Connect Via SMS",
    data-file='src/main/java/org/twilio/airtng/servlets/ExchangeSmsServlet.java',
    data-highlight='22-41')
    :markdown
      ## Connect Via SMS

      Our [Twilio application](//www.twilio.com/docs/api/rest/applications)
      should be configured to [send HTTP
      requests](//www.twilio.com/docs/api/twiml/twilio_request) to this
      controller method on any incoming text message. Our app responds with
      [TwiML](//www.twilio.com/docs/api/twiml) to tell Twilio what to do in
      response to the message.

      If the initial message sent to the anonymous number was sent by the host,
      we forward it on to the guest. Conversely, if the original message was
      sent by the guest, we forward it to the host.

      _To find the outgoing number we'll use the
      `gatherOutgoingPhoneNumberAsync` helper method._

      ---

      **See Also:**

      * [The Message TwiML verb](//www.twilio.com/docs/api/twiml/sms/message)
      * [Your message logs in the account portal](//www.twilio.com/user/account/log/messages)


  .step(data-title="Connect Via Phone Call",
    data-file='src/main/java/org/twilio/airtng/servlets/ExchangeVoiceServlet.java',
    data-highlight='29-43')
    :markdown
      ## Connect Via Phone Call

      Our [Twilio application](//www.twilio.com/docs/api/rest/applications)
      will [send HTTP requests](//www.twilio.com/docs/api/twiml/twilio_request)
      to this method on any incoming voice call. Our app responds with
      [TwiML instructions](//www.twilio.com/docs/api/twiml)
      that tell Twilio to `Play` an introductory MP3 audio file and then
      `Dial` either the guest or host, depending on who initiated the call.

      ---

      **See Also:**
      * [TwiML Dial verb](//www.twilio.com/docs/api/twiml/dial)
      * [TwiML Play verb](//www.twilio.com/docs/api/twiml/dial)


  .step(data-title='Where to Next?')
    :markdown
      ## Where to Next?

      That's it! We've just implemented anonymous communications that allow your
      customers to connect while protecting their privacy. If you're a PHP
      developer working with Twilio, you might want to check out these other tutorials:

      [**IVR: Phone Tree**](//www.twilio.com/docs/tutorials/walkthrough/ivr-phone-tree/java/servlets)

      Create a seamless customer service experience by building an IVR Phone
      Tree for your company.

      [**Click To Call**](//www.twilio.com/docs/tutorials/walkthrough/click-to-call/java/servlets)

      Allow your company to convert web traffic into phone calls with the click
      of a button.

      ### Did this help?

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet
      [@twilio](http://twitter.com/twilio) to let us know what you think.

      ![Airtng](http://howtodocs.s3.amazonaws.com/airtng-screen2.png)
